open Transparent_abstract_tactics
open Constrarg

    (*let tclABSTRACT2 name_op tac gl =
    let s = match name_op with
      | Some s -> s
      | None   -> Nameops.add_suffix (Pfedit.get_current_proof_name ()) "_term"
    in *)


    (*

  TACTIC EXTEND abstracttermas
  | [ "cache_term" constr(term) "as" ident(name) "run" tactic(tacK)]  ->
     [ fun gl -> TRANSPARENT_ABSTRACT.tclABSTRACTTERM (Some name) term tacK gl ]
       END

  TACTIC EXTEND abstractterm
  | [ "cache_term" constr(term) "run" tactic(tacK) ]  ->
     [ fun gl -> TRANSPARENT_ABSTRACT.tclABSTRACTTERM None term tacK gl ]
       END *)

    DECLARE PLUGIN "transparent_abstract_plugin"

    TACTIC EXTEND transparentabstract
  | [ "cache" tactic(tac) "as" ident(name)]
    -> [ TRANSPARENT_ABSTRACT.tclTRABSTRACT (Some name) (Tacinterp.eval_tactic tac) ]
	 END

	 TACTIC EXTEND abstracttermas
  | [ "cache_term" constr(term) "as" ident(name) "run" tactic(tacK)]  ->
     [ TRANSPARENT_ABSTRACT.tclABSTRACTTERM (Some name) term tacK  ]
       END

       TACTIC EXTEND abstractterm
  | [ "cache_term" constr(term) "run" tactic(tacK) ]  ->
     [ TRANSPARENT_ABSTRACT.tclABSTRACTTERM None term tacK ]
       END;;
